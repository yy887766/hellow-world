{
    "name": " Get-SecretId-From-SecretServer",
    "description": "",
    "rootActivity": {
        "edges": [
            {
                "to": "9557f873f86725b161b3a24135d25e",
                "from": "Get secretId",
                "type": "SUCCESS",
                "value": ""
            },
            {
                "to": "Get secretId",
                "type": "ALWAYS",
                "value": ""
            }
        ],
        "offsets": [
            {
                "name": "Get secretId",
                "x": -61.5,
                "y": 182,
                "h": 60,
                "w": 230
            },
            {
                "name": "9557f873f86725b161b3a24135d25e",
                "x": -5,
                "y": 420,
                "h": 50,
                "w": 90
            }
        ],
        "type": "graph",
        "name": "98ffb47b-e35a-4649-b63b-c3f3d01aaa8d",
        "children": [
            {
                "type": "finish",
                "name": "9557f873f86725b161b3a24135d25e",
                "children": []
            },
            {
                "allowFailure": false,
                "useImpersonation": false,
                "showHidden": false,
                "impersonationUseSudo": false,
                "commandName": "Run PowerShell Script",
                "pluginName": "Powershell",
                "pluginVersion": 3,
                "properties": {
                    "scriptBody": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}\n$url = 'https:\/\/vault.morningstar.com\/secretserver\/webservices\/sswebservice.asmx'\n\n$proxy = New-WebServiceProxy -uri $url -UseDefaultCredential\n$token=$null\n#$token=\"${p:system\/SecretServerAccessToken}\"\n$tokenResult = $proxy.Authenticate('${p:system\/SecretServer.AccessAccount}', \"${p:system\/SecretServer.AccessPassword}\", '', 'msdomain1')\n\nif ($tokenResult.Errors.length -gt 0){\n\tthrow $tokenResult.Errors[0]\n\texit\n} \nelse \n{\n\t$token = $tokenResult.Token\n\t#echo $token\n}\n\n\n\n$folderName = \"${p:folderName}\"\n$folderId = $null\n$secretName = \"${p:secretName}\"\n#Write-Host $folderName\n#Write-Host $secretName \n\nFunction GetFolderId($name)\n{\n  $folderId=0\n  $result = $proxy.SearchFolders($token,$name)\n  if ($result.Errors.length -gt 0){\n    echo $result.Errors[0]\n    return $folderId\n   }\n \n  \n  foreach($folder in $result.Folders)\n  {\n    If($folder.Name -eq $name)\n    {   \n\t$folderId=$folder.Id\n        break\t\n    }  \n  }\n  return $folderId\n}\n\nif($folderName -ne \"All\")\n{\n  $folderId=GetFolderId $folderName\n}\n\n#Write-Host $folderId\n\n$result=$proxy.SearchSecretsByFolder($token,$secretName,$folderId,$true,$false,$true)\n\nif ($result.Errors.length -gt 0){\n    throw $result.Errors[0]\n}\n\nforeach($secretSummary in $result.SecretSummaries)\n{\n    If($secretSummary.SecretName -eq $secretName)\n    {   \n\t  echo $secretSummary\n          break\t\n    }  \n}\n\n",
                    "scriptFile": "",
                    "commandPath": "",
                    "runAsDaemon": "false",
                    "outputFile": "",
                    "threadMode": "default"
                },
                "type": "plugin",
                "name": "Get secretId",
                "children": []
            }
        ]
    },
    "properties": [
        {
            "name": "contextType",
            "value": "Resource",
            "description": "",
            "secure": false
        },
        {
            "name": "workingDir",
            "value": "${p:resource\/work.dir}\/${p:process.name}",
            "description": "",
            "secure": false
        }
    ],
    "propDefs": [
        {
            "name": "folderName",
            "label": "folderName",
            "pattern": "",
            "type": "TEXT",
            "value": "All",
            "required": true,
            "description": "All indicate all folders",
            "placeholder": ""
        },
        {
            "name": "secretName",
            "label": "secretName",
            "pattern": "",
            "type": "TEXT",
            "required": true,
            "description": "example:SQL Server account",
            "placeholder": ""
        }
    ],
    "teamMappings": [{
        "teamId": "40554d70-8fe2-4dc1-a156-09620e43937a",
        "teamLabel": "ENGR",
        "resourceTypeId": "20000000000000000000000000000109",
        "resourceTypeName": "Process"
    }]
}